- name: Initialize hosts
  hosts: all
  become: true
  become_method: sudo
  gather_facts: false
  vars:
    - ansible_play_python: "{{ '/usr/bin/env python3' }}"

  tasks:
    - name: Wait for SSH access
      ansible.builtin.wait_for:
        host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
        search_regex: OpenSSH
        port: 22
      vars:
        ansible_connection: local
        ansible_python_interpreter: "{{ ansible_play_python }}"
      become: no

    - name: Gather facts
      setup:

    - name: Add Docker Stable repository
      ansible.builtin.yum_repository:
        name: docker-ce-stable
        baseurl: "https://download.docker.com/linux/centos/$releasever/$basearch/stable"
        description: Docker Stable Repo
        enabled: true
        gpgkey: "https://download.docker.com/linux/centos/gpg"
        gpgcheck: true

    - name: Add Docker Stable Source repository
      ansible.builtin.yum_repository:
        name: Docker CE Stable - Sources
        baseurl: "https://download.docker.com/linux/centos/$releasever/source/stable"
        description: Docker Stable Source Repo
        enabled: true
        gpgkey: "https://download.docker.com/linux/centos/gpg"
        gpgcheck: true

    - name: Check internal hostname
      ansible.builtin.debug:
        var: internal_dns

    - name: Set the hostname
      ansible.builtin.hostname:
        name: "{{ internal_dns }}"


- name: setup k8s servers
  hosts: k8s_servers
  become: yes
  become_method: sudo
  gather_facts: true

  tasks:
    - name: Install required packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - vim
        - git
        - jq
        - docker-ce-20.10.22-3.el8
        - docker-ce-cli-20.10.22-3.el8
        - containerd.io
        - docker-compose-plugin

    - name: Ensure docker group
      ansible.builtin.group:
        name: docker

    - name: Ensure centos user
      ansible.builtin.user:
        name: centos
        group: centos
        groups: docker
        append: true
        password: '*'
        create_home: true

    - name: Ensure docker user
      ansible.builtin.user:
        name: docker
        group: docker
        password: '*'
        create_home: false

    - name: Create xfs filesystem on /dev/xvdb
      community.general.filesystem:
        fstype: xfs
        state: present
        dev: /dev/xvdb

    - name: Mount /dev/xvdb
      ansible.posix.mount:
        state: mounted
        path: /data
        src: /dev/xvdb
        fstype: xfs
        opts: noatime

    - name: Set owner of /data
      ansible.builtin.file:
        path: "/data"
        state: directory
        owner: docker
        group: docker
        mode: 0770

    - name: get CA certificate
      ansible.builtin.copy:
        src: files/ca.pem
        dest: "/data/pki/ca.pem"
        owner: docker
        group: docker
        mode: "0644"

    - name: get CA key
      ansible.builtin.copy:
        src: files/ca.key
      register: ca_key

    - name: generate OpenSSL key
      community.crypto.openssl_privatekey:
        path: /data/pki/server.key
        type: "RSA"
        size: 4096
        state: present
        owner: docker
        group: docker
      register: key_result

    - name: generate OpenSSL CSR
      community.crypto.openssl_csr:
        privatekey_path: /data/pki/server.key
        common_name: "{{ internal_dns }}"
        country_name: US
        state_or_province_name: NY
        locality_name: NY
        organization_name: MongoDB Inc.
        organizational_unit_name: Professional Services
        email_address: ps-sde@mongodb.com
        subject_alt_name: "DNS:{{ internal_dns }}"
      register: csr_result

    - name: get signed certificate
      community.crypto.x509_certificate:
        path: /data/pki/server.pem
        csr_content: csr_result
        provider: ownca
        ownca_path: /data/pki/ca.pem
        ownca_privatekey_content: ca_key
        owner: docker
        group: docker
        mode: 0644

    - name: docker pid file
      ansible.builtin.file:
        path: "/var/run/docker.sock"
        state: file
        owner: root
        group: docker

    - name: Start docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: ssh auth entry
      ansible.builtin.lineinfile:
        path: /home/centos/.ssh/authorzied_keys
        line: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3Op1+a9gU4JzOfHTIeODGrsJkDNgjjKusexF5KzYQ2N4eSrTuFq0kTCUNRLktw3+FsFuTVSgo6+oRFGcqtTVyQRjcYTzTPyLCtYIY2V4f02zFA6WHAKJ+j00UnICRub6cik6GdV41G2In2Ywaf4AMtqnWdUy7uqFhr1vnsthhBNYQ50fMtNdBpDz8tTnRqXUlsUPST5Ez+W9sNxZAg1FsS0M1R8XS0Q1lUbaLFs+Gg1qLDLhnzUocfk+8fqzGvZA4SgR0F0l3/CYzUF6k7/VHB1WLPnYXRBwZJc9UL0PA56eigLHlD8sRuSrO6tWEkXjg6QTITJrsbbS/KEZh3C3/ centos



- name: Configure MongoDB
  hosts: app_db_servers
  become: true
  become_method: sudo
  gather_facts: true

  tasks:
    - name: Add MongoDB repo to the servers
      ansible.builtin.yum_repository:
        name: mongodb
        description: MongoDB Enterprise Repository
        baseurl: https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/6.0/$basearch/
        gpgcheck: true
        enabled: true
        gpgkey: https://www.mongodb.org/static/pgp/server-6.0.asc

    - name: Install MongoDB Enterprise
      ansible.builtin.yum:
        name: mongodb-enterprise
        state: installed
        lock_timeout: 120

    - name: Create data directory
      ansible.builtin.file:
        path: /data/
        state: directory
        owner: mongod
        group: mongod
        mode: "0775"

    - name: Create xfs filesystem on /dev/xvdb
      community.general.filesystem:
        fstype: xfs
        state: present
        dev: /dev/xvdb

    - name: Mount /dev/xvdb
      ansible.posix.mount:
        state: mounted
        path: /data
        src: /dev/xvdb
        fstype: xfs
        opts: noatime

    - name: Set owner of /data
      ansible.builtin.file:
        path: "/data"
        state: directory
        owner: mongod
        group: mongod
        recurse: true
        mode: "0770"

    - name: Create AppDB, logs
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: mongod
        group: mongod
        mode: "0770"
      loop:
        - /data/appdb
        - /data/logs
        - /data/logs/appdb
        - /data/pki

    - name: get CA certificate
      ansible.builtin.copy:
        src: files/ca.pem
        dest: "/data/pki/ca.pem"
        owner: mongod
        group: mongod
        mode: "0644"

    - name: get CA key
      ansible.builtin.copy:
        src: files/ca.key
      register: ca_key

    - name: generate OpenSSL key
      community.crypto.openssl_privatekey:
        path: /data/pki/server.key
        type: "RSA"
        size: 4096
        state: present
        owner: mongod
        group: mongod
      register: key_result

    - name: generate OpenSSL CSR
      community.crypto.openssl_csr:
        privatekey_path: /data/pki/server.key
        common_name: "{{ internal_dns }}"
        country_name: US
        state_or_province_name: NY
        locality_name: NY
        organization_name: MongoDB Inc.
        organizational_unit_name: Professional Services
        email_address: ps-sde@mongodb.com
        subject_alt_name: "DNS:{{ internal_dns }}"
      register: csr_result

    - name: get signed certificate
      community.crypto.x509_certificate:
        path: /data/pki/server.pem
        csr_content: csr_result
        provider: ownca
        ownca_path: /data/pki/ca.pem
        ownca_privatekey_content: ca_key
        owner: mongod
        group: mongod
        mode: 0644

    - name: Upload the configuration
      ansible.builtin.copy:
        src: files/mongod.conf
        dest: "/etc/mognod.conf"
        owner: mongod
        group: mongod
        mode: "0644"

    - name: Start MongoDB
      ansible.builtin.service:
        name: mongod
        state: started

    - name: initialise replica set
      community.mongodb.mongodb_replicaset:
        replica_set: appdb
        ssl: true
        ssl_ca_certs: /data/pki/ca.pem
        ssl_cert_reqs: CERT_NONE
        ssl_certfile: /data/pki/server.cert
        ssl_keyfile: /data/pki/server.key
        members:
        - "{{ groups.app_db_servers[0].internal_dns }}"
        - "{{ groups.app_db_servers[1].internal_dns }}"
        - "{{ groups.app_db_servers[2].internal_dns }}"
      when: groups.app_db_servers.index(inventory_hostname) == 2

    - name: create first user
      community.mongodb.mongodb_user:
        ssl: true
        ssl_ca_certs: /data/pki/ca.pem
        ssl_certfile: /data/pki/server.cert
        database: admin
        name: admin
        password: "902njks__123#"
        replica_set: appdb
        roles: root
        state: present
        connection_options:
        - "tlsAllowInvalidHostnames=true"
      when: groups.app_db_servers.index(inventory_hostname) == 2

    - name: create om user
      community.mongodb.mongodb_user:
        login_user: admin
        login_password: "902njks__123#"
        ssl: true
        ssl_ca_certs: /data/pki/ca.pem
        ssl_certfile: /data/pki/server.cert
        database: admin
        name: om_user
        password: "902njks__12Aq__"
        replica_set: appdb
        roles: clusterMonitor,readWriteAnyDatabase,userAdminAnyDatabase
        state: present
        connection_options:
        - "tlsAllowInvalidHostnames=true"
      when: groups.app_db_servers.index(inventory_hostname) == 2


- name: Configure Ops Manager servers
  hosts: ops_manager_servers
  become: true
  become_method: sudo
  gather_facts: true

  tasks:
    - name: Create MMS directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: mongodb-mms
        group: mongodb-mms
        mode: "0770"
      loop:
        - /opt/mongodb
        - /opt/mongodb/pki

    - name: get CA certificate
      ansible.builtin.copy:
        src: files/ca.pem
        dest: "/opt/mongodb/pki/ca.pem"
        owner: mongod
        group: mongod
        mode: "0644"

    - name: get CA key
      ansible.builtin.copy:
        src: files/ca.key
      register: ca_key

    - name: generate OpenSSL key
      community.crypto.openssl_privatekey:
        path: /opt/mongodb/pki/server.key
        type: "RSA"
        size: 4096
        state: present
        owner: mongod
        group: mongod
      register: key_result

    - name: generate OpenSSL CSR
      community.crypto.openssl_csr:
        privatekey_path: /opt/mongodb/pki/server.key
        common_name: "{{ internal_dns }}"
        country_name: US
        state_or_province_name: NY
        locality_name: NY
        organization_name: MongoDB Inc.
        organizational_unit_name: Professional Services
        email_address: ps-sde@mongodb.com
        subject_alt_name: "DNS:{{ internal_dns }}"
      register: csr_result

    - name: sign certificate
      community.crypto.x509_certificate:
        path: /opt/mongodb/pki/server.pem
        csr_content: csr_result
        provider: ownca
        ownca_path: /opt/mongodb/pki/ca.pem
        ownca_privatekey_content: ca_key
        owner: mongod
        group: mongod
        mode: 0644

    - name: install mms
      ansible.builtin.yum:
        name: https://downloads.mongodb.com/on-prem-mms/rpm/mongodb-mms-6.0.10.100.20230228T0344Z.x86_64.rpm
        state: present

    - name: mms config file
      vars:
        connection_string: "mongodb://{{ groups.app_db_servers[0].internal_dns }}:27017,{{ groups.app_db_servers[1].internal_dns }}:27017,{{ groups.app_db_servers[2].internal_dns }}:27017"
      ansible.builtin.template:
        src: files/mms.conf.j2
        dest: /opt/mongodb/mms/conf/conf-mms.properties
        mode: 0600
        owner: mongodb-mms
        group: mongodb-mms